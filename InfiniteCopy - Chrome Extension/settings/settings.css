@import url('https://fonts.googleapis.com/css2?family=Google+Sans:wght@400;500;700&display=swap');
:root {
    /* Define your blueish theme colors */
    --primary-color: #2196F3; /* A standard Material Blue 500 */
    --primary-light: #64B5F6; /* Material Blue 300 */
    --primary-dark: #1976D2; /* Material Blue 700 */
    --primary-darkest: #0D47A1; /* Material Blue 900 */
    --secondary-color: #03A9F4; /* A complementary light blue */
    --text-primary: #212121; /* Dark grey for primary text */
    --text-secondary: #757575; /* Medium grey for secondary text */
    --background-color: #E3F2FD; /* A very light blue for background */
    --surface-color: #FFFFFF; /* White for surfaces like cards */
    --accent-color: #FFC107; /* A contrasting accent color (amber) */
}

html,body {
    margin: 0;
    padding: 0;
}

body {
    margin: 0;
    padding: 0;
    font-family: 'Google Sans'; /* Consider a Material Design font like Roboto */
    background-color: var(--background-color);
    color: var(--text-primary);
}

header {
    background-color: var(--primary-color);
    color: var(--surface-color); /* White text on blue header */
    padding-left: 10px; /* Adjust padding as needed */
    display: flex;
    align-items: center; /* Vertically align header elements */
    z-index: 100;
}

.header-element {
    margin-left: 10px;
    margin-right: 10px;
}

.material-symbols-outlined {
    font-family: 'Material Symbols Outlined';
    font-variation-settings:
        'FILL' 0,
        'wght' 400,
        'GRAD' 0,
        'opsz' 24;
    color: #ffffff; /* Use a secondary text color for icons */
}

/* Example styling for other elements using the theme */
main {
    padding-left: 10px;
}
section {
    margin-bottom: 24px;
    background-color: var(--surface-color);
    padding-left: 10px;
    border-radius: 4px; /* Optional: Rounded corners for sections */
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12); /* Optional: Subtle shadow */
}

button {
    background-color: var(--accent-color);
    color: var(--text-primary);
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background-color: #FFD54F; /* A slightly lighter shade of amber */
}

.mdc-switch.mdc-switch--checked .mdc-switch__track {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}

.mdc-switch.mdc-switch--checked .mdc-switch__thumb {
    background-color: var(--primary-color);
}

.mdc-switch__label {
    color: var(--text-primary);
}

.button-style {
    background-color: var(--primary-color);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 20px;
}

.button-style:hover {
    background-color: var(--primary-dark);
    cursor: pointer;
}

.button-style:active {
    background-color: var(--primary-darkest);
}

#footer-text {
    margin-left: 10px;
}

#alert-container {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1000;
    /* background-color: var(--primary-light); */ /* Keep if you have the variable */
}

.copy-alert {
    padding: 10px 20px; /* Increased padding for better visibility */
    border-radius: 5px;
    opacity: 0; /* Initially hidden */
    transform: translateY(-100%); /* Initially positioned above */
    transition: opacity 0.3s ease-out, transform 0.3s ease-out; /* For appearing */
    background-color: #e0f7fa; /* Light cyan background */
    border: 1px solid #b2ebf2;
    color: #00838f; /* Dark cyan text */
    margin-bottom: 10px; /* Add some margin */
    transform-origin: top center; /* For the zoom-out effect */
}

.copy-alert.show-alert {
    opacity: 1; /* Fade in */
    transform: translateY(0); /* Slide down to its normal position */
}

.copy-alert.fade-out {
    opacity: 0; /* Fade out */
    transform: scale(0.1); /* Zoom out slightly */
    transition: opacity 0.5s ease-in, transform 0.5s ease-in; /* For disappearing */
}

.theme-style {
    cursor: pointer;
    width: 40px;
    height: 40px;
    border: 2px solid var(--primary-dark);
    border-radius: 50%;
    background-color: var(--primary-color);
    /* Add transition for smooth animation */
    transition: transform 0.2s ease-in-out;
    /* Center the element for consistent scaling from the middle */
    display: flex; /* Or display: block; and use margin: auto; if it's the only block element */
    justify-content: center;
    align-items: center;
}

.theme-style:hover {
    /* Scale by 120% (1 + 0.20) */
    transform: scale(1.2);
    /*
     Alternatively, if you want to explicitly control width/height without transform,
     you would need to use absolute positioning or a similar technique to prevent reflow.
     However, transform: scale() is generally more performant for this specific effect.

     If you were to use width/height directly AND avoid reflow, you would need
     to wrap this element in a container and absolutely position it, then
     adjust its top/left on hover to simulate scaling from the center.
     But that's more complex than 'transform: scale()'.
    */
}

#theme-options {
    display: flex;
    flex-direction: row;
    gap: 10px;
}

#blue {
    background-color: #2196F3;
}

#red {
    background-color: #F44336;
}

#purple {
    background-color: #9C27B0;
}

#green {
    background-color: #4CAF50;
}

#yellow {
    background-color: #FFEB3B;
}

#theme-header {
    color: var(--primary-color);
}
