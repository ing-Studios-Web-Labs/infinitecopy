@import url('https://fonts.googleapis.com/css2?family=Google+Sans:wght@400;500;700&display=swap');
:root {
    /* Define your blueish theme colors */
    --primary-color: #2196F3; /* A standard Material Blue 500 */
    --primary-light: #64B5F6; /* Material Blue 300 */
    --primary-dark: #1976D2; /* Material Blue 700 */
    --primary-darkest: #0D47A1; /* Material Blue 900 */
    --secondary-color: #03A9F4; /* A complementary light blue */
    --text-primary: #212121; /* Dark grey for primary text */
    --text-secondary: #757575; /* Medium grey for secondary text */
    --background-color: #E3F2FD; /* A very light blue for background */
    --surface-color: #FFFFFF; /* White for surfaces like cards */
    --accent-color: #FFC107; /* A contrasting accent color (amber) */
}

html,body {
    margin: 0;
    padding: 0;
}

body {
    margin: 0;
    padding: 0;
    font-family: 'Google Sans'; /* Consider a Material Design font like Google Sans */
    background-color: var(--background-color);
    color: var(--text-primary);
    transition: background-color ease 0.4s;
}

header {
    background-color: var(--primary-color);
    color: var(--surface-color); /* White text on blue header */
    padding-left: 10px; /* Adjust padding as needed */
    display: flex;
    align-items: center; /* Vertically align header elements */
    z-index: 100;
    transition: background-color ease 0.4s;
}

.header-element {
    margin-left: 10px;
    margin-right: 10px;
}

.material-symbols-outlined {
    font-family: 'Material Symbols Outlined';
    font-variation-settings:
        'FILL' 0,
        'wght' 400,
        'GRAD' 0,
        'opsz' 24;
    color: #ffffff; /* Use a secondary text color for icons */
}

/* Example styling for other elements using the theme */
main {
    padding-left: 10px;
}

section {
    margin-bottom: 24px;
    background-color: var(--surface-color);
    padding-left: 10px;
    border-radius: 4px; /* Optional: Rounded corners for sections */
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12); /* Optional: Subtle shadow */
}

button {
    background-color: var(--accent-color);
    color: var(--text-primary);
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background-color: #FFD54F; /* A slightly lighter shade of amber */
}

.mdc-switch.mdc-switch--checked .mdc-switch__track {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}

.mdc-switch.mdc-switch--checked .mdc-switch__thumb {
    background-color: var(--primary-color);
}

.mdc-switch__label {
    color: var(--text-primary);
}

.button-style {
    background-color: var(--primary-color);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 20px;
    transition: border-radius 0.2s ease-in-out, background-color 0.4s ease;
    position: relative; /* CRUCIAL for positioning the ripple */
    overflow: hidden; /* CRUCIAL to hide the ripple outside the button */
    -webkit-tap-highlight-color: transparent; /* For mobile to remove default tap highlight */
}

.button-style:hover {
    background-color: var(--primary-dark);
    border-radius: 10px;
    cursor: pointer;
}

.button-style:active {
    background-color: var(--primary-darkest);
    border-radius: 10px;
}

#footer-text {
    margin-left: 10px;
}

#alert-container {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1000;
    /* background-color: var(--primary-light); */ /* Keep if you have the variable */
}

.copy-alert {
    padding: 10px 20px; /* Increased padding for better visibility */
    border-radius: 5px;
    opacity: 0; /* Initially hidden */
    transform: translateY(-100%); /* Initially positioned above */
    transition: opacity 0.3s ease-out, transform 0.3s ease-out; /* For appearing */
    background-color: #e0f7fa; /* Light cyan background */
    border: 1px solid #b2ebf2;
    color: #00838f; /* Dark cyan text */
    margin-bottom: 10px; /* Add some margin */
    transform-origin: top center; /* For the zoom-out effect */
}

.copy-alert.show-alert {
    opacity: 1; /* Fade in */
    transform: translateY(0); /* Slide down to its normal position */
}

.copy-alert.fade-out {
    opacity: 0; /* Fade out */
    transform: scale(0.1); /* Zoom out slightly */
    transition: opacity 0.5s ease-in, transform 0.5s ease-in; /* For disappearing */
}

.theme-style {
    cursor: pointer;
    width: 40px;
    height: 40px;
    border: 2px solid var(--primary-dark);
    border-radius: 50%;
    background-color: var(--primary-color);
    /* Add transition for smooth animation */
    transition: transform 0.2s ease-in-out, border-color ease 0.4s;
    /* Center the element for consistent scaling from the middle */
    display: flex; /* Or display: block; and use margin: auto; if it's the only block element */
    justify-content: center;
    align-items: center;
    position: relative; /* CRUCIAL for positioning the ripple */
    overflow: hidden; /* CRUCIAL to hide the ripple outside the button */
    -webkit-tap-highlight-color: transparent; /* For mobile to remove default tap highlight */
}

.theme-style:hover {
    /* Scale by 120% (1 + 0.20) */
    transform: scale(1.2);
    /*
     Alternatively, if you want to explicitly control width/height without transform,
     you would need to use absolute positioning or a similar technique to prevent reflow.
     However, transform: scale() is generally more performant for this specific effect.

     If you were to use width/height directly AND avoid reflow, you would need
     to wrap this element in a container and absolutely position it, then
     adjust its top/left on hover to simulate scaling from the center.
     But that's more complex than 'transform: scale()'.
    */
}

#theme-options {
    display: flex;
    flex-direction: row;
    gap: 10px;
}

#blue {
    background-color: #2196F3;
}

#red {
    background-color: #F44336;
}

#purple {
    background-color: #9C27B0;
}

#green {
    background-color: #4CAF50;
}

#yellow {
    background-color: #FFEB3B;
}

#theme-header {
    color: var(--primary-color);
    transition: color ease 0.4s;
}

#export-data-btn {
    gap: 5px;
    color: #ffffff;
    width: fit-content;
    padding-left: 5px;
    padding-right: 5px;
}

#open-source-code {
    gap: 5px;
    color: #ffffff;
    width: fit-content;
    padding-left: 5px;
    padding-right: 5px;
}

.ripple {
    position: absolute;
    border-radius: 50%; /* Makes it circular */
    background: rgba(255, 255, 255, 0.4); /* Semi-transparent white */
    transform: scale(0); /* Starts hidden */
    animation: ripple-animation 0.6s linear; /* Apply the animation */
    pointer-events: none; /* Allows clicks to pass through the ripple */
}

@keyframes ripple-animation {
  to {
    transform: scale(4); /* Expands the ripple */
    opacity: 0; /* Fades out the ripple */
  }
}

/* The switch container */
.switch {
  position: relative;
  display: inline-block;
  width: 50px; /* Keep current width */
  height: 26px; /* Keep current height for the track */
}

/* Hide default HTML checkbox */
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

/* The slider (track) */
.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc; /* Off state track color */
    transition: 0.4s;
}

/* The slider (thumb/handle) */
.slider:before {
    position: absolute;
    content: "";
    /*
    * Calculation for thumb size and position for 3px padding on all sides:
    * Track Height: 26px
    * Thumb Height/Width: 26px - 3px (top padding) - 3px (bottom padding) = 20px
    * Initial Left/Bottom: 3px
    */
    height: 20px; /* ADJUSTED: Thumb height (26 - 3 - 3 = 20px) */
    width: 20px; /* ADJUSTED: Thumb width to keep it round */
    left: 3px; /* ADJUSTED: Initial position from left (3px padding) */
    bottom: 3px; /* ADJUSTED: Initial position from bottom (3px padding) */
    background-color: white; /* Thumb color */
    -webkit-transition: 0.4s;
    transition: 0.4s;
}

/* When the checkbox is checked, change background color of the track */
input:checked + .slider {
    background-color: var(--primary-color);
}

/* When the checkbox is checked, move the thumb to the right */
input:checked + .slider:before {
    /*
    * Calculation for translateX for symmetrical 3px padding:
    * Switch Width: 50px
    * Thumb Width: 20px
    * Initial Left Padding: 3px
    * Desired Right Padding: 3px
    * TranslateX = Switch Width - Thumb Width - Initial Left Padding - Desired Right Padding
    * TranslateX = 50 - 20 - 3 - 3 = 24px
    */
    transform: translateX(24px);
}

/* Rounded sliders (optional) */
.slider.round {
    border-radius: 13px; /* Half of height (26px / 2 = 13px) */
}

.slider.round:before {
    border-radius: 50%; /* Keeps thumb perfectly round */
}

/* Layout for the container of the custom switch to align with text */
.switch-container {
    display: flex;
    align-items: center; /* Vertically centers the items */
    gap: 10px; /* Adds space between the h2 and the switch */
}

/* Add some padding for the H2 inside the container */
.switch-container h2 {
    margin: 0; /* Remove default margin from H2 to align better */
}

/* Progress Track - the main bar background */
.progress-style-track {
    position: relative; /* For positioning the fill inside */
    width: 250px;
    height: 20px; /* Thicker bar for expressive feel */
    background-color: var(--primary-light); /* Lighter track color */
    border-radius: 8px; /* Half of height for fully rounded ends */
    overflow: hidden; /* Important to keep fill within rounded corners */
    margin-top: 10px;
    margin-bottom: 10px;
    transition: background-color ease 0.4s;
}

/* Progress Fill - the actual progress indicator */
.progress-style-fill {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%; /* Take full height of the track */
    width: 0%; /* Initial width, controlled by JS */
    background: linear-gradient(to right, var(--primary-color), var(--primary-dark)); /* Subtle gradient for richness */
    border-radius: 5px; /* Match track border-radius */
    transition: width 0.6s cubic-bezier(0.4, 0.0, 0.2, 1); /* Material 3 motion curve */
    display: flex; /* To position stop indicator at the end */
    justify-content: flex-end; /* Push stop indicator to the end */
    align-items: center;
    padding-right: 2px; /* Space for the stop indicator */
}

/* Stop Indicator - the small dot at the end of the fill */
.progress-style-stop-indicator {
    width: 12px; /* Size of the dot */
    height: 12px;
    background-color: var(--primary-color); /* Color contrasting with the fill */
    border-radius: 50%; /* Make it a circle */
    opacity: 0; /* Hidden by default */
    transform: translateX(100%); /* Start off-screen */
    transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
}

/* Show stop indicator when progress is not 0 */
.progress-style-fill[data-progress-active] .progress-style-stop-indicator {
    opacity: 1;
    transform: translateX(0); /* Bring it on-screen */
}

/* Optional: Adding a "gap" visual for Material 3 */
/* This is harder to do purely with CSS for a solid bar, 
   but can be faked with a subtle inset shadow or by making 
   the fill slightly smaller and letting the track show through. 
   For a more distinct gap, you'd need two fill elements or use SVG. */
/* A subtle inset shadow on the fill can give a perceived gap */
.progress-style-fill {
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1); /* Very subtle inner border/gap */
}

#storage-used-h3 {
    color: var(--text-primary);
}

#storage-used-primary {
    font-size: 180%;
}

#store-images-efficiently-container {
    transition: opacity 0.3s ease, pointer-events 0.3s ease;
}

.greyed-out {
    opacity: 0.5; /* Makes it semi-transparent */
    pointer-events: none; /* Prevents clicks/interactions on child elements */
    background-color: var(--background-color); /* Slightly darker grey background */
    cursor: not-allowed; /* Change cursor to "not allowed" */
}